{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "New Raman ID",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyOlPuwedzAvIT1kt3b8EmW0",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/FLC-ML/practicespace/blob/master/Raman%20ID%20Kaitlyn\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jHbxf1REqj-_",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 130
        },
        "outputId": "8b601838-a1bc-4fff-f8c9-5583b5aa4e46"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n",
            "\n",
            "Enter your authorization code:\n",
            "··········\n",
            "Mounted at /content/drive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cmGZmNFCq2qA",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 93
        },
        "outputId": "bb5d177d-f07f-4e8c-9a49-b6f31012d5f5"
      },
      "source": [
        "# import packages\n",
        "import tensorflow as tf\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import numpy as np\n",
        "import os\n",
        "from tensorflow.keras.layers import BatchNormalization, ZeroPadding1D, Conv1D, AveragePooling1D, MaxPooling1D\n",
        "from tensorflow.keras.layers import Activation, Dense,  Flatten, Input, add, Dropout\n",
        "from tensorflow.keras.regularizers import l2\n",
        "from tensorflow.keras import backend as K\n",
        "from tensorflow.keras.models import Model, load_model\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.callbacks import LearningRateScheduler\n",
        "from tensorflow import summary\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import confusion_matrix\n",
        "from keras.utils.vis_utils import plot_model\n",
        "\n",
        "# define resnet class\n",
        "class ResNet:\n",
        "  @staticmethod\n",
        "  # create one residual block\n",
        "  def residual_module(data, K, convLayers, chanDim=-1, reduce=False, reg=0.0001, bnEps=2e-5, bnMom=0.9, dropout=0.8, kernel_size=1):\n",
        "    K = K*0.25\n",
        "    shortcut = data\n",
        "    x = data\n",
        "\n",
        "    print(\"Resnet Block\")\n",
        "    for i in range(convLayers):\n",
        "      x = BatchNormalization(axis=chanDim, epsilon=bnEps, momentum=bnMom)(x)\n",
        "      x = Activation(\"relu\")(x)\n",
        "      \n",
        "      if (i == convLayers - 1):\n",
        "        K = K*4\n",
        "        x = Conv1D(int(K), kernel_size, use_bias=False, kernel_regularizer=l2(reg))(x)\n",
        "      elif (i == int(convLayers/2)):\n",
        "        x = Conv1D(int(K), kernel_size, use_bias=False, kernel_regularizer=l2(reg))(x)\n",
        "      else:\n",
        "        x = Conv1D(int(K), kernel_size, use_bias=False, kernel_regularizer=l2(reg))(x)\n",
        "      if (dropout is not None):\n",
        "        x = Dropout(dropout)(x)\n",
        "     \n",
        "      # print(\"**PostConvolution\", x.shape)\n",
        "      print(\"*ConvGroup\", x.shape, K)\n",
        "\n",
        "    if reduce:\n",
        "      # shortcut = BatchNormalization(axis=chanDim, epsilon=bnEps, momentum=bnMom)(shortcut)\n",
        "      shortcut = Conv1D(K, kernel_size, use_bias=False, kernel_regularizer=l2(reg))(shortcut)\n",
        "    print(\"*Shortcut shape\", shortcut.shape)\n",
        "\n",
        "    x = add([x, shortcut])\n",
        "\n",
        "    return x\n",
        "\n",
        "\n",
        "  @staticmethod\n",
        "  # build a model out of resblocks\n",
        "  def build(inputShape, resLayers, classes, convLayers, filters, reg=0.0001, bnEps=2e-5, bnMom=0.9, dropout=None, kernel_size=1):\n",
        "    chanDim = -1\n",
        "    inputs = Input(shape=inputShape)\n",
        "\n",
        "    # initial batchnorm and convolutional layer\n",
        "    x = BatchNormalization(axis=chanDim, epsilon = bnEps, momentum=bnMom)(inputs)\n",
        "    x = Conv1D(filters[0], 5, strides=2, use_bias=False, padding=\"same\", kernel_regularizer=l2(reg))(inputs)\n",
        "    \n",
        "    x = BatchNormalization(axis=chanDim, epsilon=bnEps, momentum=bnMom)(x)\n",
        "    x = Activation(\"relu\")(x)\n",
        "\n",
        "       \n",
        "    x = ResNet.residual_module(data=x, K=filters[1], convLayers=convLayers, reduce=True, bnEps=bnEps, bnMom=bnMom)\n",
        "\n",
        "    for i in range(0, resLayers - 1):\n",
        "      x = ResNet.residual_module(data=x, K=filters[1], convLayers=convLayers, bnEps=bnEps, bnMom=bnMom)\n",
        "    \n",
        "    x = BatchNormalization(axis=chanDim, epsilon=bnEps, momentum=bnMom)(x)\n",
        "    x = Activation(\"relu\")(x)\n",
        "    x = AveragePooling1D(8)(x)\n",
        "    x = Flatten()(x)\n",
        "    x = Dense(classes, kernel_regularizer=l2(reg))(x)\n",
        "    x = Activation(\"softmax\")(x)\n",
        "\n",
        "    model = Model(inputs, x, name=\"resnet\")\n",
        "\n",
        "    return model\n",
        "\n",
        "\n",
        "  @staticmethod\n",
        "  def pretrain(save_directory, features, labels, verbose=1,\n",
        "                                   batch_size=32, \n",
        "                                   epochs=10, \n",
        "                                   filters=(64, 100), \n",
        "                                   resLayers=1, \n",
        "                                   convLayers=1, \n",
        "                                   learningRate=0.01,   \n",
        "                                   dropout=0.8,\n",
        "                                   kernel_size=1):\n",
        "    X = features\n",
        "    y = labels\n",
        "\n",
        "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.01)\n",
        "\n",
        "\n",
        "    # add depth channel\n",
        "    X_train = X_train.reshape((X_train.shape[0], X_train.shape[1], 1))\n",
        "    X_test = X_test.reshape((X_test.shape[0], X_test.shape[1], 1))\n",
        "\n",
        "    # input shape is everything except for the number of samples \n",
        "    # number of classes is the number of unique items in y\n",
        "    in_shape = X_train.shape[1:]\n",
        "    n_classes = len(np.unique(y_train))\n",
        "\n",
        "    # build model\n",
        "    model = ResNet.build(inputShape=in_shape, classes=n_classes, convLayers=convLayers, resLayers=resLayers, filters=filters, dropout=dropout)\n",
        "\n",
        "    # compile, train model\n",
        "    model.compile(loss = 'sparse_categorical_crossentropy', optimizer=Adam(learningRate), metrics = ['accuracy'])\n",
        "    tf.keras.utils.plot_model(model, to_file = 'Pretrained_Model_Architecture.png', show_shapes=True, show_layer_names=False) #get architecture diagram\n",
        "    model.fit(X_train, y_train, batch_size=batch_size,epochs=epochs, verbose=verbose)\n",
        "\n",
        "    # test accuracy\n",
        "    accuracy = model.evaluate(X_test, y_test, batch_size=batch_size, verbose=verbose)\n",
        "    print(\"(pretraining) Testing accuracy from within X_reference.npy and y_reference.npy:\", accuracy[1])\n",
        "\n",
        "    # Save the weights\n",
        "    model.save(save_directory)\n",
        "\n",
        "    # return model\n",
        "    return model\n",
        "\n",
        "\n",
        "  @staticmethod\n",
        "  def finetune(save_directory, features, labels, verbose=1,\n",
        "               learningRate=1e-4,\n",
        "               batch_size=10, \n",
        "               epochs=10):\n",
        "    X = features\n",
        "    y = labels\n",
        "\n",
        "    # create \n",
        "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.05)\n",
        "\n",
        "    X_train = X_train.reshape((X_train.shape[0], X_train.shape[1], 1))\n",
        "    X_test = X_test.reshape((X_test.shape[0], X_test.shape[1], 1))\n",
        "    \n",
        "    model = load_model(save_directory)\n",
        "  \n",
        "    model.compile(optimizer=Adam(learningRate),  # Very low learning rate\n",
        "    loss = 'sparse_categorical_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "    model.summary()\n",
        "\n",
        "    history = model.fit(X_train, y_train, batch_size=batch_size, epochs=epochs, verbose=verbose)\n",
        "    loss, acc = model.evaluate(X_test, y_test, batch_size=batch_size, verbose=verbose)\n",
        "    print(\"(finetuning) Testing accuracy from within X_fine and y_fine: \", acc)\n",
        "  \n",
        "    return model"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n",
            "  import pandas.util.testing as tm\n",
            "Using TensorFlow backend.\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "laHjV5J7rUic",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "4059c025-3905-482f-eea0-6561009196bb"
      },
      "source": [
        "# pretrain hyperparameters\n",
        "batch_size = 100\n",
        "epochs = 3\n",
        "verbose = 1\n",
        "filters = (64, 100, 100, 100, 100, 100, 100)\n",
        "resLayers = 6\n",
        "convLayers = 4\n",
        "learningRate = 0.001\n",
        "dropout = 0.8\n",
        "kernel_size = 1\n",
        "\n",
        "\n",
        "# save_directory is the path where the model will be saved after pretraining \n",
        "# and the path where the finetuning model will read from\n",
        "save_directory = '/content/drive/My Drive/ML Group/Individual Work/Kaitlyn/Saved Models/base.h5' \n",
        "\n",
        "\n",
        "# load data (specific to google drive)\n",
        "X_test = np.load('/content/drive/My Drive/ML Group/Datasets/data/X_test.npy')\n",
        "y_test = np.load('/content/drive/My Drive/ML Group/Datasets/data/y_test.npy')\n",
        "\n",
        "X = np.load('/content/drive/My Drive/ML Group/Datasets/data/X_ref.npy')\n",
        "y = np.load('/content/drive/My Drive/ML Group/Datasets/data/y_reference.npy')\n",
        "\n",
        "X_fine = np.load('/content/drive/My Drive/ML Group/Datasets/data/X_finetune.npy')\n",
        "y_fine = np.load('/content/drive/My Drive/ML Group/Datasets/data/y_finetune.npy')\n",
        "\n",
        "print(\"X Reference Dataset Shape: \", X.shape)\n",
        "print(\"y Reference Dataset Shape: \", y.shape)\n",
        "print(\"X Test Dataset Shape: \", X_test.shape)\n",
        "print(\"y Test Dataset Shape: \", y_test.shape)\n",
        "print(\"X Finetuning Dataset Shape: \", X_fine.shape)\n",
        "print(\"y Finetuning Dataset Shape: \", y_fine.shape)\n",
        "\n",
        "indices = np.arange(X.shape[0])\n",
        "indices_t = np.arange(X_test.shape[0])\n",
        "indices_f = np.arange(X_fine.shape[0])\n",
        "\n",
        "np.random.shuffle(indices)\n",
        "np.random.shuffle(indices_t)\n",
        "np.random.shuffle(indices_f)\n",
        "\n",
        "\n",
        "X = X[indices]\n",
        "X_test = X_test[indices_t]\n",
        "X_fine = X_fine[indices_f]\n",
        "y = y[indices]\n",
        "y_test = y_test[indices_t]\n",
        "y_fine = y_fine[indices_f]\n",
        "\n",
        "\n",
        "from time import time\n",
        "t00 = time()\n",
        "\n",
        "pretrained_model = ResNet.pretrain(save_directory=save_directory, features=X, labels=y, verbose=verbose,\n",
        "                                   batch_size=batch_size, \n",
        "                                   epochs=epochs, \n",
        "                                   filters=filters, \n",
        "                                   resLayers=resLayers, \n",
        "                                   convLayers=convLayers, \n",
        "                                   learningRate=learningRate,\n",
        "                                   dropout=dropout,\n",
        "                                   kernel_size=kernel_size)\n",
        "\n",
        "pre_loss, pre_acc = pretrained_model.evaluate(X_test, y_test, batch_size=batch_size, verbose=verbose)\n",
        "print(\"Testing loss, accuracy after pretraining from X_test and y_test:\", pre_loss, pre_acc)\n",
        "print('\\n Completed in: {:0.2f}s'.format(time()-t00))"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "X Reference Dataset Shape:  (60000, 991)\n",
            "y Reference Dataset Shape:  (60000,)\n",
            "X Test Dataset Shape:  (3000, 1000)\n",
            "y Test Dataset Shape:  (3000,)\n",
            "X Finetuning Dataset Shape:  (3000, 1000)\n",
            "y Finetuning Dataset Shape:  (3000,)\n",
            "Resnet Block\n",
            "*ConvGroup (None, 496, 25) 25.0\n",
            "*ConvGroup (None, 496, 25) 25.0\n",
            "*ConvGroup (None, 496, 25) 25.0\n",
            "*ConvGroup (None, 496, 100) 100.0\n",
            "*Shortcut shape (None, 496, 100)\n",
            "Resnet Block\n",
            "*ConvGroup (None, 496, 25) 25.0\n",
            "*ConvGroup (None, 496, 25) 25.0\n",
            "*ConvGroup (None, 496, 25) 25.0\n",
            "*ConvGroup (None, 496, 100) 100.0\n",
            "*Shortcut shape (None, 496, 100)\n",
            "Resnet Block\n",
            "*ConvGroup (None, 496, 25) 25.0\n",
            "*ConvGroup (None, 496, 25) 25.0\n",
            "*ConvGroup (None, 496, 25) 25.0\n",
            "*ConvGroup (None, 496, 100) 100.0\n",
            "*Shortcut shape (None, 496, 100)\n",
            "Resnet Block\n",
            "*ConvGroup (None, 496, 25) 25.0\n",
            "*ConvGroup (None, 496, 25) 25.0\n",
            "*ConvGroup (None, 496, 25) 25.0\n",
            "*ConvGroup (None, 496, 100) 100.0\n",
            "*Shortcut shape (None, 496, 100)\n",
            "Resnet Block\n",
            "*ConvGroup (None, 496, 25) 25.0\n",
            "*ConvGroup (None, 496, 25) 25.0\n",
            "*ConvGroup (None, 496, 25) 25.0\n",
            "*ConvGroup (None, 496, 100) 100.0\n",
            "*Shortcut shape (None, 496, 100)\n",
            "Resnet Block\n",
            "*ConvGroup (None, 496, 25) 25.0\n",
            "*ConvGroup (None, 496, 25) 25.0\n",
            "*ConvGroup (None, 496, 25) 25.0\n",
            "*ConvGroup (None, 496, 100) 100.0\n",
            "*Shortcut shape (None, 496, 100)\n",
            "Epoch 1/3\n",
            "594/594 [==============================] - 29s 48ms/step - loss: 0.6363 - accuracy: 0.8384\n",
            "Epoch 2/3\n",
            "594/594 [==============================] - 29s 48ms/step - loss: 0.3420 - accuracy: 0.9162\n",
            "Epoch 3/3\n",
            "594/594 [==============================] - 29s 48ms/step - loss: 0.3111 - accuracy: 0.9228\n",
            "6/6 [==============================] - 0s 11ms/step - loss: 0.2587 - accuracy: 0.9417\n",
            "(pretraining) Testing accuracy from within X_reference.npy and y_reference.npy: 0.9416666626930237\n",
            "WARNING:tensorflow:Model was constructed with shape (None, 991, 1) for input Tensor(\"input_2:0\", shape=(None, 991, 1), dtype=float32), but it was called on an input with incompatible shape (100, 1000, 1).\n",
            "30/30 [==============================] - 0s 13ms/step - loss: 4.3496 - accuracy: 0.4633\n",
            "Testing loss, accuracy after pretraining from X_test and y_test: 4.349593639373779 0.4633333384990692\n",
            "\n",
            " Completed in: 99.71s\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AKBJRr3drkOy",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "289e9dc0-7913-4152-94a0-d6d739098a6e"
      },
      "source": [
        "# finetune hyperparameters\n",
        "ft_batch_size = 10\n",
        "ft_epochs = 25\n",
        "ft_learningRate = 1e-4   \n",
        "\n",
        "from time import time\n",
        "t00 = time()\n",
        "\n",
        "finetuned_model = ResNet.finetune(save_directory=save_directory, features=X_fine, labels=y_fine, epochs=ft_epochs, learningRate=ft_learningRate, batch_size=ft_batch_size)\n",
        "\n",
        "loss, acc = finetuned_model.evaluate(X_test, y_test, batch_size=ft_batch_size, verbose=verbose)\n",
        "print(\"Pretrained accuracy: \", pre_acc)\n",
        "print(\"Fintuned accuracy: \", acc)\n",
        "print('\\n Completed in: {:0.2f}s'.format(time()-t00))"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"resnet\"\n",
            "__________________________________________________________________________________________________\n",
            "Layer (type)                    Output Shape         Param #     Connected to                     \n",
            "==================================================================================================\n",
            "input_2 (InputLayer)            [(None, 991, 1)]     0                                            \n",
            "__________________________________________________________________________________________________\n",
            "conv1d_26 (Conv1D)              (None, 496, 64)      320         input_2[0][0]                    \n",
            "__________________________________________________________________________________________________\n",
            "batch_normalization_28 (BatchNo (None, 496, 64)      256         conv1d_26[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "activation_27 (Activation)      (None, 496, 64)      0           batch_normalization_28[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "batch_normalization_29 (BatchNo (None, 496, 64)      256         activation_27[0][0]              \n",
            "__________________________________________________________________________________________________\n",
            "activation_28 (Activation)      (None, 496, 64)      0           batch_normalization_29[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "conv1d_27 (Conv1D)              (None, 496, 25)      1600        activation_28[0][0]              \n",
            "__________________________________________________________________________________________________\n",
            "dropout_24 (Dropout)            (None, 496, 25)      0           conv1d_27[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "batch_normalization_30 (BatchNo (None, 496, 25)      100         dropout_24[0][0]                 \n",
            "__________________________________________________________________________________________________\n",
            "activation_29 (Activation)      (None, 496, 25)      0           batch_normalization_30[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "conv1d_28 (Conv1D)              (None, 496, 25)      625         activation_29[0][0]              \n",
            "__________________________________________________________________________________________________\n",
            "dropout_25 (Dropout)            (None, 496, 25)      0           conv1d_28[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "batch_normalization_31 (BatchNo (None, 496, 25)      100         dropout_25[0][0]                 \n",
            "__________________________________________________________________________________________________\n",
            "activation_30 (Activation)      (None, 496, 25)      0           batch_normalization_31[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "conv1d_29 (Conv1D)              (None, 496, 25)      625         activation_30[0][0]              \n",
            "__________________________________________________________________________________________________\n",
            "dropout_26 (Dropout)            (None, 496, 25)      0           conv1d_29[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "batch_normalization_32 (BatchNo (None, 496, 25)      100         dropout_26[0][0]                 \n",
            "__________________________________________________________________________________________________\n",
            "activation_31 (Activation)      (None, 496, 25)      0           batch_normalization_32[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "conv1d_30 (Conv1D)              (None, 496, 100)     2500        activation_31[0][0]              \n",
            "__________________________________________________________________________________________________\n",
            "dropout_27 (Dropout)            (None, 496, 100)     0           conv1d_30[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "conv1d_31 (Conv1D)              (None, 496, 100)     6400        activation_27[0][0]              \n",
            "__________________________________________________________________________________________________\n",
            "add_6 (Add)                     (None, 496, 100)     0           dropout_27[0][0]                 \n",
            "                                                                 conv1d_31[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "batch_normalization_33 (BatchNo (None, 496, 100)     400         add_6[0][0]                      \n",
            "__________________________________________________________________________________________________\n",
            "activation_32 (Activation)      (None, 496, 100)     0           batch_normalization_33[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "conv1d_32 (Conv1D)              (None, 496, 25)      2500        activation_32[0][0]              \n",
            "__________________________________________________________________________________________________\n",
            "dropout_28 (Dropout)            (None, 496, 25)      0           conv1d_32[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "batch_normalization_34 (BatchNo (None, 496, 25)      100         dropout_28[0][0]                 \n",
            "__________________________________________________________________________________________________\n",
            "activation_33 (Activation)      (None, 496, 25)      0           batch_normalization_34[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "conv1d_33 (Conv1D)              (None, 496, 25)      625         activation_33[0][0]              \n",
            "__________________________________________________________________________________________________\n",
            "dropout_29 (Dropout)            (None, 496, 25)      0           conv1d_33[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "batch_normalization_35 (BatchNo (None, 496, 25)      100         dropout_29[0][0]                 \n",
            "__________________________________________________________________________________________________\n",
            "activation_34 (Activation)      (None, 496, 25)      0           batch_normalization_35[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "conv1d_34 (Conv1D)              (None, 496, 25)      625         activation_34[0][0]              \n",
            "__________________________________________________________________________________________________\n",
            "dropout_30 (Dropout)            (None, 496, 25)      0           conv1d_34[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "batch_normalization_36 (BatchNo (None, 496, 25)      100         dropout_30[0][0]                 \n",
            "__________________________________________________________________________________________________\n",
            "activation_35 (Activation)      (None, 496, 25)      0           batch_normalization_36[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "conv1d_35 (Conv1D)              (None, 496, 100)     2500        activation_35[0][0]              \n",
            "__________________________________________________________________________________________________\n",
            "dropout_31 (Dropout)            (None, 496, 100)     0           conv1d_35[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "add_7 (Add)                     (None, 496, 100)     0           dropout_31[0][0]                 \n",
            "                                                                 add_6[0][0]                      \n",
            "__________________________________________________________________________________________________\n",
            "batch_normalization_37 (BatchNo (None, 496, 100)     400         add_7[0][0]                      \n",
            "__________________________________________________________________________________________________\n",
            "activation_36 (Activation)      (None, 496, 100)     0           batch_normalization_37[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "conv1d_36 (Conv1D)              (None, 496, 25)      2500        activation_36[0][0]              \n",
            "__________________________________________________________________________________________________\n",
            "dropout_32 (Dropout)            (None, 496, 25)      0           conv1d_36[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "batch_normalization_38 (BatchNo (None, 496, 25)      100         dropout_32[0][0]                 \n",
            "__________________________________________________________________________________________________\n",
            "activation_37 (Activation)      (None, 496, 25)      0           batch_normalization_38[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "conv1d_37 (Conv1D)              (None, 496, 25)      625         activation_37[0][0]              \n",
            "__________________________________________________________________________________________________\n",
            "dropout_33 (Dropout)            (None, 496, 25)      0           conv1d_37[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "batch_normalization_39 (BatchNo (None, 496, 25)      100         dropout_33[0][0]                 \n",
            "__________________________________________________________________________________________________\n",
            "activation_38 (Activation)      (None, 496, 25)      0           batch_normalization_39[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "conv1d_38 (Conv1D)              (None, 496, 25)      625         activation_38[0][0]              \n",
            "__________________________________________________________________________________________________\n",
            "dropout_34 (Dropout)            (None, 496, 25)      0           conv1d_38[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "batch_normalization_40 (BatchNo (None, 496, 25)      100         dropout_34[0][0]                 \n",
            "__________________________________________________________________________________________________\n",
            "activation_39 (Activation)      (None, 496, 25)      0           batch_normalization_40[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "conv1d_39 (Conv1D)              (None, 496, 100)     2500        activation_39[0][0]              \n",
            "__________________________________________________________________________________________________\n",
            "dropout_35 (Dropout)            (None, 496, 100)     0           conv1d_39[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "add_8 (Add)                     (None, 496, 100)     0           dropout_35[0][0]                 \n",
            "                                                                 add_7[0][0]                      \n",
            "__________________________________________________________________________________________________\n",
            "batch_normalization_41 (BatchNo (None, 496, 100)     400         add_8[0][0]                      \n",
            "__________________________________________________________________________________________________\n",
            "activation_40 (Activation)      (None, 496, 100)     0           batch_normalization_41[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "conv1d_40 (Conv1D)              (None, 496, 25)      2500        activation_40[0][0]              \n",
            "__________________________________________________________________________________________________\n",
            "dropout_36 (Dropout)            (None, 496, 25)      0           conv1d_40[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "batch_normalization_42 (BatchNo (None, 496, 25)      100         dropout_36[0][0]                 \n",
            "__________________________________________________________________________________________________\n",
            "activation_41 (Activation)      (None, 496, 25)      0           batch_normalization_42[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "conv1d_41 (Conv1D)              (None, 496, 25)      625         activation_41[0][0]              \n",
            "__________________________________________________________________________________________________\n",
            "dropout_37 (Dropout)            (None, 496, 25)      0           conv1d_41[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "batch_normalization_43 (BatchNo (None, 496, 25)      100         dropout_37[0][0]                 \n",
            "__________________________________________________________________________________________________\n",
            "activation_42 (Activation)      (None, 496, 25)      0           batch_normalization_43[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "conv1d_42 (Conv1D)              (None, 496, 25)      625         activation_42[0][0]              \n",
            "__________________________________________________________________________________________________\n",
            "dropout_38 (Dropout)            (None, 496, 25)      0           conv1d_42[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "batch_normalization_44 (BatchNo (None, 496, 25)      100         dropout_38[0][0]                 \n",
            "__________________________________________________________________________________________________\n",
            "activation_43 (Activation)      (None, 496, 25)      0           batch_normalization_44[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "conv1d_43 (Conv1D)              (None, 496, 100)     2500        activation_43[0][0]              \n",
            "__________________________________________________________________________________________________\n",
            "dropout_39 (Dropout)            (None, 496, 100)     0           conv1d_43[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "add_9 (Add)                     (None, 496, 100)     0           dropout_39[0][0]                 \n",
            "                                                                 add_8[0][0]                      \n",
            "__________________________________________________________________________________________________\n",
            "batch_normalization_45 (BatchNo (None, 496, 100)     400         add_9[0][0]                      \n",
            "__________________________________________________________________________________________________\n",
            "activation_44 (Activation)      (None, 496, 100)     0           batch_normalization_45[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "conv1d_44 (Conv1D)              (None, 496, 25)      2500        activation_44[0][0]              \n",
            "__________________________________________________________________________________________________\n",
            "dropout_40 (Dropout)            (None, 496, 25)      0           conv1d_44[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "batch_normalization_46 (BatchNo (None, 496, 25)      100         dropout_40[0][0]                 \n",
            "__________________________________________________________________________________________________\n",
            "activation_45 (Activation)      (None, 496, 25)      0           batch_normalization_46[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "conv1d_45 (Conv1D)              (None, 496, 25)      625         activation_45[0][0]              \n",
            "__________________________________________________________________________________________________\n",
            "dropout_41 (Dropout)            (None, 496, 25)      0           conv1d_45[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "batch_normalization_47 (BatchNo (None, 496, 25)      100         dropout_41[0][0]                 \n",
            "__________________________________________________________________________________________________\n",
            "activation_46 (Activation)      (None, 496, 25)      0           batch_normalization_47[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "conv1d_46 (Conv1D)              (None, 496, 25)      625         activation_46[0][0]              \n",
            "__________________________________________________________________________________________________\n",
            "dropout_42 (Dropout)            (None, 496, 25)      0           conv1d_46[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "batch_normalization_48 (BatchNo (None, 496, 25)      100         dropout_42[0][0]                 \n",
            "__________________________________________________________________________________________________\n",
            "activation_47 (Activation)      (None, 496, 25)      0           batch_normalization_48[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "conv1d_47 (Conv1D)              (None, 496, 100)     2500        activation_47[0][0]              \n",
            "__________________________________________________________________________________________________\n",
            "dropout_43 (Dropout)            (None, 496, 100)     0           conv1d_47[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "add_10 (Add)                    (None, 496, 100)     0           dropout_43[0][0]                 \n",
            "                                                                 add_9[0][0]                      \n",
            "__________________________________________________________________________________________________\n",
            "batch_normalization_49 (BatchNo (None, 496, 100)     400         add_10[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "activation_48 (Activation)      (None, 496, 100)     0           batch_normalization_49[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "conv1d_48 (Conv1D)              (None, 496, 25)      2500        activation_48[0][0]              \n",
            "__________________________________________________________________________________________________\n",
            "dropout_44 (Dropout)            (None, 496, 25)      0           conv1d_48[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "batch_normalization_50 (BatchNo (None, 496, 25)      100         dropout_44[0][0]                 \n",
            "__________________________________________________________________________________________________\n",
            "activation_49 (Activation)      (None, 496, 25)      0           batch_normalization_50[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "conv1d_49 (Conv1D)              (None, 496, 25)      625         activation_49[0][0]              \n",
            "__________________________________________________________________________________________________\n",
            "dropout_45 (Dropout)            (None, 496, 25)      0           conv1d_49[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "batch_normalization_51 (BatchNo (None, 496, 25)      100         dropout_45[0][0]                 \n",
            "__________________________________________________________________________________________________\n",
            "activation_50 (Activation)      (None, 496, 25)      0           batch_normalization_51[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "conv1d_50 (Conv1D)              (None, 496, 25)      625         activation_50[0][0]              \n",
            "__________________________________________________________________________________________________\n",
            "dropout_46 (Dropout)            (None, 496, 25)      0           conv1d_50[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "batch_normalization_52 (BatchNo (None, 496, 25)      100         dropout_46[0][0]                 \n",
            "__________________________________________________________________________________________________\n",
            "activation_51 (Activation)      (None, 496, 25)      0           batch_normalization_52[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "conv1d_51 (Conv1D)              (None, 496, 100)     2500        activation_51[0][0]              \n",
            "__________________________________________________________________________________________________\n",
            "dropout_47 (Dropout)            (None, 496, 100)     0           conv1d_51[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "add_11 (Add)                    (None, 496, 100)     0           dropout_47[0][0]                 \n",
            "                                                                 add_10[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "batch_normalization_53 (BatchNo (None, 496, 100)     400         add_11[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "activation_52 (Activation)      (None, 496, 100)     0           batch_normalization_53[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "average_pooling1d_1 (AveragePoo (None, 62, 100)      0           activation_52[0][0]              \n",
            "__________________________________________________________________________________________________\n",
            "flatten_1 (Flatten)             (None, 6200)         0           average_pooling1d_1[0][0]        \n",
            "__________________________________________________________________________________________________\n",
            "dense_1 (Dense)                 (None, 30)           186030      flatten_1[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "activation_53 (Activation)      (None, 30)           0           dense_1[0][0]                    \n",
            "==================================================================================================\n",
            "Total params: 234,062\n",
            "Trainable params: 231,706\n",
            "Non-trainable params: 2,356\n",
            "__________________________________________________________________________________________________\n",
            "Epoch 1/25\n",
            "WARNING:tensorflow:Model was constructed with shape (None, 991, 1) for input Tensor(\"input_2_3:0\", shape=(None, 991, 1), dtype=float32), but it was called on an input with incompatible shape (10, 1000, 1).\n",
            "WARNING:tensorflow:Model was constructed with shape (None, 991, 1) for input Tensor(\"input_2_3:0\", shape=(None, 991, 1), dtype=float32), but it was called on an input with incompatible shape (10, 1000, 1).\n",
            "285/285 [==============================] - 6s 20ms/step - loss: 1.9280 - accuracy: 0.6249\n",
            "Epoch 2/25\n",
            "285/285 [==============================] - 6s 20ms/step - loss: 1.0815 - accuracy: 0.7126\n",
            "Epoch 3/25\n",
            "285/285 [==============================] - 6s 20ms/step - loss: 0.8401 - accuracy: 0.7670\n",
            "Epoch 4/25\n",
            "285/285 [==============================] - 6s 20ms/step - loss: 0.7157 - accuracy: 0.8102\n",
            "Epoch 5/25\n",
            "285/285 [==============================] - 6s 21ms/step - loss: 0.6210 - accuracy: 0.8333\n",
            "Epoch 6/25\n",
            "285/285 [==============================] - 6s 21ms/step - loss: 0.5629 - accuracy: 0.8498\n",
            "Epoch 7/25\n",
            "285/285 [==============================] - 6s 20ms/step - loss: 0.5174 - accuracy: 0.8632\n",
            "Epoch 8/25\n",
            "285/285 [==============================] - 6s 21ms/step - loss: 0.4694 - accuracy: 0.8782\n",
            "Epoch 9/25\n",
            "285/285 [==============================] - 6s 22ms/step - loss: 0.4396 - accuracy: 0.8853\n",
            "Epoch 10/25\n",
            "285/285 [==============================] - 6s 22ms/step - loss: 0.3996 - accuracy: 0.8996\n",
            "Epoch 11/25\n",
            "285/285 [==============================] - 5s 19ms/step - loss: 0.3765 - accuracy: 0.9028\n",
            "Epoch 12/25\n",
            "285/285 [==============================] - 6s 20ms/step - loss: 0.3533 - accuracy: 0.9084\n",
            "Epoch 13/25\n",
            "285/285 [==============================] - 6s 20ms/step - loss: 0.3328 - accuracy: 0.9158\n",
            "Epoch 14/25\n",
            "285/285 [==============================] - 6s 20ms/step - loss: 0.3094 - accuracy: 0.9253\n",
            "Epoch 15/25\n",
            "285/285 [==============================] - 6s 20ms/step - loss: 0.2912 - accuracy: 0.9302\n",
            "Epoch 16/25\n",
            "285/285 [==============================] - 6s 20ms/step - loss: 0.2771 - accuracy: 0.9344\n",
            "Epoch 17/25\n",
            "285/285 [==============================] - 6s 20ms/step - loss: 0.2635 - accuracy: 0.9372\n",
            "Epoch 18/25\n",
            "285/285 [==============================] - 6s 21ms/step - loss: 0.2543 - accuracy: 0.9428\n",
            "Epoch 19/25\n",
            "285/285 [==============================] - 6s 20ms/step - loss: 0.2369 - accuracy: 0.9477\n",
            "Epoch 20/25\n",
            "285/285 [==============================] - 6s 20ms/step - loss: 0.2249 - accuracy: 0.9509\n",
            "Epoch 21/25\n",
            "285/285 [==============================] - 6s 19ms/step - loss: 0.2127 - accuracy: 0.9565\n",
            "Epoch 22/25\n",
            "285/285 [==============================] - 6s 19ms/step - loss: 0.2049 - accuracy: 0.9565\n",
            "Epoch 23/25\n",
            "285/285 [==============================] - 6s 21ms/step - loss: 0.1994 - accuracy: 0.9596\n",
            "Epoch 24/25\n",
            "285/285 [==============================] - 6s 19ms/step - loss: 0.1880 - accuracy: 0.9642\n",
            "Epoch 25/25\n",
            "285/285 [==============================] - 6s 20ms/step - loss: 0.1734 - accuracy: 0.9719\n",
            "WARNING:tensorflow:Model was constructed with shape (None, 991, 1) for input Tensor(\"input_2_3:0\", shape=(None, 991, 1), dtype=float32), but it was called on an input with incompatible shape (10, 1000, 1).\n",
            "15/15 [==============================] - 0s 6ms/step - loss: 0.2988 - accuracy: 0.9200\n",
            "(finetuning) Testing accuracy from within X_fine and y_fine:  0.9200000166893005\n",
            "WARNING:tensorflow:Model was constructed with shape (None, 991, 1) for input Tensor(\"input_2_3:0\", shape=(None, 991, 1), dtype=float32), but it was called on an input with incompatible shape (10, 1000, 1).\n",
            "300/300 [==============================] - 2s 7ms/step - loss: 0.7395 - accuracy: 0.8323\n",
            "Pretrained accuracy:  0.4633333384990692\n",
            "Fintuned accuracy:  0.8323333263397217\n",
            "\n",
            " Completed in: 157.99s\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ynDh0rTPkKVD",
        "colab_type": "text"
      },
      "source": [
        "Create Labels"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nL05o9uBkMe-",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# get labels and order\n",
        "\n",
        "ORDER = [16, 17, 14, 18, 15, 20, 21, 24, 23, 26, 27, 28, 29, 25, 6, 7, 5, 3, 4,\n",
        "         9, 10, 2, 8, 11, 22, 19, 12, 13, 0, 1]\n",
        "\n",
        "STRAINS = {}\n",
        "STRAINS[0] = \"C. albicans\"\n",
        "STRAINS[1] = \"C. glabrata\"\n",
        "STRAINS[2] = \"K. aerogenes\"\n",
        "STRAINS[3] = \"E. coli 1\"\n",
        "STRAINS[4] = \"E. coli 2\"\n",
        "STRAINS[5] = \"E. faecium\"\n",
        "STRAINS[6] = \"E. faecalis 1\"\n",
        "STRAINS[7] = \"E. faecalis 2\"\n",
        "STRAINS[8] = \"E. cloacae\"\n",
        "STRAINS[9] = \"K. pneumoniae 1\"\n",
        "STRAINS[10] = \"K. pneumoniae 2\"\n",
        "STRAINS[11] = \"P. mirabilis\"\n",
        "STRAINS[12] = \"P. aeruginosa 1\"\n",
        "STRAINS[13] = \"P. aeruginosa 2\"\n",
        "STRAINS[14] = \"MSSA 1\"\n",
        "STRAINS[15] = \"MSSA 3\"\n",
        "STRAINS[16] = \"MRSA 1 (isogenic)\"\n",
        "STRAINS[17] = \"MRSA 2\"\n",
        "STRAINS[18] = \"MSSA 2\"\n",
        "STRAINS[19] = \"S. enterica\"\n",
        "STRAINS[20] = \"S. epidermidis\"\n",
        "STRAINS[21] = \"S. lugdunensis\"\n",
        "STRAINS[22] = \"S. marcescens\"\n",
        "STRAINS[23] = \"S. pneumoniae 2\"\n",
        "STRAINS[24] = \"S. pneumoniae 1\"\n",
        "STRAINS[25] = \"S. sanguinis\"\n",
        "STRAINS[26] = \"Group A Strep.\"\n",
        "STRAINS[27] = \"Group B Strep.\"\n",
        "STRAINS[28] = \"Group C Strep.\"\n",
        "STRAINS[29] = \"Group G Strep.\"\n",
        "\n",
        "label = [STRAINS[i] for i in ORDER]"
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kU2GaTmHkTFm",
        "colab_type": "text"
      },
      "source": [
        "Create Classification Matrix"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oqF0FAmuroVp",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 764
        },
        "outputId": "df2e1bb0-de16-4780-c3dd-0d883aeead22"
      },
      "source": [
        "from sklearn.metrics import classification_report\n",
        "import seaborn as sns\n",
        "import pandas\n",
        "y_pred = finetuned_model.predict(x = X_test)\n",
        "predIndx = np.argmax(y_pred, axis = 1)\n",
        "print(\"Predictions Shape:\", y_pred.shape)\n",
        "print(\"Classes:\", y_pred[0].shape)\n",
        "print(len(y_pred), \"Predictions Made\")\n",
        "cr = classification_report(y_test, predIndx, target_names = label)\n",
        "print(cr)"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Predictions Shape: (3000, 30)\n",
            "Classes: (30,)\n",
            "3000 Predictions Made\n",
            "                   precision    recall  f1-score   support\n",
            "\n",
            "MRSA 1 (isogenic)       1.00      0.90      0.95       100\n",
            "           MRSA 2       0.91      1.00      0.95       100\n",
            "           MSSA 1       0.64      0.71      0.67       100\n",
            "           MSSA 2       0.90      1.00      0.95       100\n",
            "           MSSA 3       0.72      0.63      0.67       100\n",
            "   S. epidermidis       0.94      0.99      0.97       100\n",
            "   S. lugdunensis       0.97      0.35      0.51       100\n",
            "  S. pneumoniae 1       0.58      0.87      0.69       100\n",
            "  S. pneumoniae 2       0.89      0.56      0.69       100\n",
            "   Group A Strep.       0.66      0.75      0.70       100\n",
            "   Group B Strep.       0.88      0.92      0.90       100\n",
            "   Group C Strep.       0.69      0.40      0.51       100\n",
            "   Group G Strep.       0.75      0.86      0.80       100\n",
            "     S. sanguinis       0.99      0.69      0.81       100\n",
            "    E. faecalis 1       0.87      1.00      0.93       100\n",
            "    E. faecalis 2       0.78      0.83      0.80       100\n",
            "       E. faecium       0.81      0.83      0.82       100\n",
            "        E. coli 1       1.00      0.47      0.64       100\n",
            "        E. coli 2       0.98      0.93      0.95       100\n",
            "  K. pneumoniae 1       0.93      0.98      0.96       100\n",
            "  K. pneumoniae 2       1.00      1.00      1.00       100\n",
            "     K. aerogenes       0.67      0.96      0.79       100\n",
            "       E. cloacae       0.58      0.87      0.69       100\n",
            "     P. mirabilis       0.88      0.85      0.86       100\n",
            "    S. marcescens       0.77      0.89      0.83       100\n",
            "      S. enterica       0.90      0.92      0.91       100\n",
            "  P. aeruginosa 1       0.96      0.90      0.93       100\n",
            "  P. aeruginosa 2       0.99      0.99      0.99       100\n",
            "      C. albicans       0.96      0.94      0.95       100\n",
            "      C. glabrata       0.96      0.98      0.97       100\n",
            "\n",
            "         accuracy                           0.83      3000\n",
            "        macro avg       0.85      0.83      0.83      3000\n",
            "     weighted avg       0.85      0.83      0.83      3000\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MuyA_LWmkWqg",
        "colab_type": "text"
      },
      "source": [
        "Create Confusion Matrix"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JXTn7vL9rt4z",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "cc3371c4-6af9-415d-c721-56a1ccfcd657"
      },
      "source": [
        "# plot confusion matrix\n",
        "\n",
        "p_test = finetuned_model.predict(X_test).argmax(axis=1)\n",
        "cm = confusion_matrix(y_test, p_test, labels = ORDER)\n",
        "plt.figure(figsize = (17,17))\n",
        "cm = 100*cm / cm.sum(axis = 1)[:,np.newaxis]\n",
        "ax = sns.heatmap(cm, annot = True, cmap = \"YlGnBu\", fmt = '0.0f', \n",
        "                 xticklabels = label, yticklabels = label)\n",
        "ax.xaxis.tick_top()\n",
        "plt.xticks(rotation = 90)\n",
        "ax.set_title('Normalized Confusion Matrix', fontsize = 16, pad=20)\n",
        "#plt.title('Normalized Confusion Matrix', fontsize = 16)\n",
        "plt.xlabel('Predicted', fontsize = 12)\n",
        "ax.xaxis.set_label_position('top') \n",
        "plt.ylabel('True', fontsize = 12)\n",
        "plt.savefig('Confusion Matrix')\n",
        "plt.show()"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1224x1224 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}